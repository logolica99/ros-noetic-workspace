// Generated by gencpp from file ros_vosk/speech_recognition.msg
// DO NOT EDIT!


#ifndef ROS_VOSK_MESSAGE_SPEECH_RECOGNITION_H
#define ROS_VOSK_MESSAGE_SPEECH_RECOGNITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_vosk
{
template <class ContainerAllocator>
struct speech_recognition_
{
  typedef speech_recognition_<ContainerAllocator> Type;

  speech_recognition_()
    : time_recognized()
    , final_result()
    , partial_result()
    , isSpeech_recognized(false)  {
    }
  speech_recognition_(const ContainerAllocator& _alloc)
    : time_recognized()
    , final_result(_alloc)
    , partial_result(_alloc)
    , isSpeech_recognized(false)  {
  (void)_alloc;
    }



   typedef ros::Time _time_recognized_type;
  _time_recognized_type time_recognized;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _final_result_type;
  _final_result_type final_result;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _partial_result_type;
  _partial_result_type partial_result;

   typedef uint8_t _isSpeech_recognized_type;
  _isSpeech_recognized_type isSpeech_recognized;





  typedef boost::shared_ptr< ::ros_vosk::speech_recognition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vosk::speech_recognition_<ContainerAllocator> const> ConstPtr;

}; // struct speech_recognition_

typedef ::ros_vosk::speech_recognition_<std::allocator<void> > speech_recognition;

typedef boost::shared_ptr< ::ros_vosk::speech_recognition > speech_recognitionPtr;
typedef boost::shared_ptr< ::ros_vosk::speech_recognition const> speech_recognitionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vosk::speech_recognition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vosk::speech_recognition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_vosk::speech_recognition_<ContainerAllocator1> & lhs, const ::ros_vosk::speech_recognition_<ContainerAllocator2> & rhs)
{
  return lhs.time_recognized == rhs.time_recognized &&
    lhs.final_result == rhs.final_result &&
    lhs.partial_result == rhs.partial_result &&
    lhs.isSpeech_recognized == rhs.isSpeech_recognized;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_vosk::speech_recognition_<ContainerAllocator1> & lhs, const ::ros_vosk::speech_recognition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_vosk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_vosk::speech_recognition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vosk::speech_recognition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vosk::speech_recognition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vosk::speech_recognition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vosk::speech_recognition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vosk::speech_recognition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vosk::speech_recognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3b0b667a7ab9370dea4b81b6e8de6c9";
  }

  static const char* value(const ::ros_vosk::speech_recognition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3b0b667a7ab9370ULL;
  static const uint64_t static_value2 = 0xdea4b81b6e8de6c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vosk::speech_recognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vosk/speech_recognition";
  }

  static const char* value(const ::ros_vosk::speech_recognition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vosk::speech_recognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time    time_recognized\n"
"string  final_result\n"
"string  partial_result \n"
"bool    isSpeech_recognized\n"
;
  }

  static const char* value(const ::ros_vosk::speech_recognition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vosk::speech_recognition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_recognized);
      stream.next(m.final_result);
      stream.next(m.partial_result);
      stream.next(m.isSpeech_recognized);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct speech_recognition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vosk::speech_recognition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vosk::speech_recognition_<ContainerAllocator>& v)
  {
    s << indent << "time_recognized: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_recognized);
    s << indent << "final_result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.final_result);
    s << indent << "partial_result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.partial_result);
    s << indent << "isSpeech_recognized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isSpeech_recognized);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VOSK_MESSAGE_SPEECH_RECOGNITION_H
